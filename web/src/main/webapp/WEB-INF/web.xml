<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
		 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
  <display-name>Archetype Created Web Application</display-name>

  <welcome-file-list>
    <welcome-file></welcome-file>
  </welcome-file-list>

  <!--context-param元素声明应用范围内的初始化参数 -->
  <!-- 加载Spring全局配置文件 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <!-- 文件位置在src下，也可以放在/WEB-INF下 -->
    <param-value>classpath*:/context.xml</param-value>
  </context-param>

  <!--过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联 -->
  <!--一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--servlet API的版本2.3增加了对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。Listener元素指出事件监听程序类 -->
  <!-- Spring监听，spring框架的入口 -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- Spring MVC配置，处理request -->
  <!-- 自定义servlet名称与路径，默认路径和文件名/WEB-INF/[servlet名字]-servlet.xml -->
  <servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。可通过使用HttpSession的setMaxInactiveInterval方法明确设置单个会话对象的超时值，或者可利用session-config元素制定缺省超时值 -->
  <session-config>
    <session-timeout>20</session-timeout>
  </session-config>

  <!--<error-page>-->
    <!--<exception-type>java.lang.Throwable</exception-type>-->
    <!--<location>/WEB-INF/views/error/500.jsp</location>-->
  <!--</error-page>-->
  <!--<error-page>-->
    <!--<error-code>500</error-code>-->
    <!--<location>/WEB-INF/views/error/500.jsp</location>-->
  <!--</error-page>-->
  <!--<error-page>-->
    <!--<error-code>404</error-code>-->
    <!--<location>/WEB-INF/views/error/404.jsp</location>-->
  <!--</error-page>-->

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

</web-app>
